) +
theme_minimal()
small_diamond %>%
ggplot(aes(x= carat, y = price)) +
geom_segment(aes(xend = carat, yend = model_diamond$fitted.values),
alpha = 0.5, color = "red"
) +
geom_point(alpha = 0.5) +
geom_abline(intercept = model_diamond$coefficients["(Intercept)"],
slope = model_diamond$coefficients["carat"],
color = "blue"
) +
theme_minimal()
model_ols <- lm(price~1, small_diamond) # membuat model price tanpa menggunakan prediktor
model_ols
summary(model_diamond)
price = -2141 + 7611*2.4
price
library(dplyr)
crime <- read.csv("data_input/crime.csv") %>%
dplyr::select(-X)
names(crime) <- c("percent_m", "is_south", "mean_education", "police_exp60", "police_exp59", "labour_participation",
"m_per1000f", "state_pop", "nonwhites_per1000", "unemploy_m24", "unemploy_m39", "gdp", "inequality",
"prob_prison", "time_prison", "crime_rate")
head(crime)
model_ineq <- lm(formula = inequality~gdp, data = crime)
summary(model_ineq)
# Visualizing fitting line
ggplot(crime, aes(x = gdp, y = inequality))+
geom_point(alpha = 0.5)+
geom_smooth(method = "lm")+
theme_minimal()
carat <- c(0.97, 1.2, 0.69, 0.89)
predict(object = model_diamond, newdata = data.frame(carat))
# Visualizing fitting line
ggplot(small_diamond, aes(x = carat, y = price))+
geom_point(alpha = 0.5)+
geom_smooth(method = "lm")+
theme_minimal()
library(MASS)
data(hills)
hills
# membuat beberapa model
# membandingkan nilai r-quared model
# membandingkan nilai adj r-quared model
insurance <- read.csv("data_input/train_insurance.csv")
str(insurance)
knitr::include_graphics("assets/data-science.png")
# your code here
# your code here
insurance %>%
ggplot(aes(bmi, charges)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
library(GGally)
# Mencari korelasi dari variabel numerik
# your code here
# your code here
df_agg %>%
ggplot(aes(x = region, y = sex, fill = charges )) +
geom_tile() +
scale_fill_gradient(low = "firebrick", high = "lightyellow") +
theme_minimal()
# Hanya ambil 500 data secara acak
RNGkind(sample.kind = "Rounding")
set.seed(100) # untuk mengunci hasil randomisasi data
insample <- sample(nrow(diamonds), 500) # melakukan random data sebanyak 500 data
insample
small_diamond <- diamonds[insample, ]
head(small_diamond)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
fig.align = "center",
comment = "#>")
options(scipen = 99)
library(dplyr)
library(leaps)
library(MASS)
knitr::include_graphics("assets/cheatsheet.png")
knitr::include_graphics("assets/RM.png")
library(ggplot2)
head(diamonds)
# Hanya ambil 500 data secara acak
RNGkind(sample.kind = "Rounding")
set.seed(100) # untuk mengunci hasil randomisasi data
insample <- sample(nrow(diamonds), 500) # melakukan random data sebanyak 500 data
insample
small_diamond <- diamonds[insample, ]
head(small_diamond)
# Visualization
plot(x = small_diamond$carat, y = small_diamond$price)
str(small_diamond)
colSums(is.na(small_diamond))
anyNA(small_diamond)
boxplot(small_diamond$price)
hist(small_diamond$carat, breaks = 50)
cor(small_diamond$carat, small_diamond$price)
plot(small_diamond$carat, small_diamond$price)
knitr::include_graphics("assets/lm-now.jpeg")
model_diamond <- lm(formula = price~carat, data = small_diamond)
model_diamond
-2141 + 7611*2
# Membuat slope dan intercept secara random
set.seed(123)
df_random <- data.frame(intercept = model_diamond$coefficients["(Intercept)"] * runif(100, max = 2),
slope = model_diamond$coefficients["carat"] * runif(100, max = 2)
)
# Visualization
small_diamond %>%
ggplot(aes(x= carat, y = price)) +
geom_abline(data = df_random, aes(slope = slope, intercept = intercept), alpha = 0.2, color = "red") +
geom_point(alpha = 0.5) +
geom_abline(intercept = model_diamond$coefficients["(Intercept)"],
slope = model_diamond$coefficients["carat"],
color = "blue"
) +
theme_minimal()
small_diamond %>%
ggplot(aes(x= carat, y = price)) +
geom_segment(aes(xend = carat, yend = model_diamond$fitted.values),
alpha = 0.5, color = "red"
) +
geom_point(alpha = 0.5) +
geom_abline(intercept = model_diamond$coefficients["(Intercept)"],
slope = model_diamond$coefficients["carat"],
color = "blue"
) +
theme_minimal()
model_ols <- lm(price~1, small_diamond) # membuat model price tanpa menggunakan prediktor
model_ols
summary(model_diamond)
price = -2141 + 7611*2.4
price
library(dplyr)
crime <- read.csv("data_input/crime.csv") %>%
dplyr::select(-X)
names(crime) <- c("percent_m", "is_south", "mean_education", "police_exp60", "police_exp59", "labour_participation",
"m_per1000f", "state_pop", "nonwhites_per1000", "unemploy_m24", "unemploy_m39", "gdp", "inequality",
"prob_prison", "time_prison", "crime_rate")
head(crime)
model_ineq <- lm(formula = inequality~gdp, data = crime)
summary(model_ineq)
# Visualizing fitting line
ggplot(crime, aes(x = gdp, y = inequality))+
geom_point(alpha = 0.5)+
geom_smooth(method = "lm")+
theme_minimal()
carat <- c(0.97, 1.2, 0.69, 0.89)
predict(object = model_diamond, newdata = data.frame(carat))
# Visualizing fitting line
ggplot(small_diamond, aes(x = carat, y = price))+
geom_point(alpha = 0.5)+
geom_smooth(method = "lm")+
theme_minimal()
summary(model_diamond)
model_diamond$coefficients
summary(model_diamond)
model_diamond$coefficients
ggplot(small_diamond, aes(x=carat))+geom_boxplot()
small_diamond_no<-small_diamond %>%
filter(carat<2.1)
head(small_diamond_no)
small_diamond[small_diamond$carat<2.1,]
head(small_diamond_no)
model_diamond_no<-lm(formula=price ~ carat, data=small_diamond_no)
model_diamond_no
ggplot(small_diamond, aes(x = carat, y = price))+
geom_point(alpha = 0.5)+
geom_abline(intercept = model_diamond$coefficients[1], slope = model_diamond$coefficients[2], col = "blue")+
geom_abline(intercept = model_diamond_no$coefficients[1], slope = model_diamond_no$coefficients[2], col = "red")+
theme_minimal()
model_diamond$coefficients
model_diamond_no$coefficients
summary(model_diamond)$r.squared
summary(model_diamond)$r.squared
summary(model_diamond_no)$r.squared
summary(hills)
#cara 1
model_time<-lm(formula = time ~ dist + climb, data = hills)
#cara 2
model_time2<-lm(formula = time ~ ., data = hills)
#cara 1
model_time<-lm(formula = time ~ dist + climb, data = hills)
model_time
#cara 2
model_time2<-lm(formula = time ~ ., data = hills)
model_time2
summary(model_time)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
fig.align = "center",
comment = "#>")
options(scipen = 99)
library(dplyr)
library(leaps)
library(MASS)
knitr::include_graphics("assets/cheatsheet.png")
knitr::include_graphics("assets/RM.png")
library(ggplot2)
head(diamonds)
# Hanya ambil 500 data secara acak
RNGkind(sample.kind = "Rounding")
set.seed(100) # untuk mengunci hasil randomisasi data
insample <- sample(nrow(diamonds), 500) # melakukan random data sebanyak 500 data
small_diamond <- diamonds[insample, ]
head(small_diamond)
# Visualization
plot(x = small_diamond$carat, y = small_diamond$price)
str(small_diamond)
colSums(is.na(small_diamond))
anyNA(small_diamond)
boxplot(small_diamond$price)
hist(small_diamond$carat, breaks = 50)
cor(small_diamond$carat, small_diamond$price)
plot(small_diamond$carat, small_diamond$price)
knitr::include_graphics("assets/lm-now.jpeg")
model_diamond <- lm(formula = price~carat, data = small_diamond)
model_diamond
-2141 + 7611*2
# Membuat slope dan intercept secara random
set.seed(123)
df_random <- data.frame(intercept = model_diamond$coefficients["(Intercept)"] * runif(100, max = 2),
slope = model_diamond$coefficients["carat"] * runif(100, max = 2)
)
# Visualization
small_diamond %>%
ggplot(aes(x= carat, y = price)) +
geom_abline(data = df_random, aes(slope = slope, intercept = intercept), alpha = 0.2, color = "red") +
geom_point(alpha = 0.5) +
geom_abline(intercept = model_diamond$coefficients["(Intercept)"],
slope = model_diamond$coefficients["carat"],
color = "blue"
) +
theme_minimal()
small_diamond %>%
ggplot(aes(x= carat, y = price)) +
geom_segment(aes(xend = carat, yend = model_diamond$fitted.values),
alpha = 0.5, color = "red"
) +
geom_point(alpha = 0.5) +
geom_abline(intercept = model_diamond$coefficients["(Intercept)"],
slope = model_diamond$coefficients["carat"],
color = "blue"
) +
theme_minimal()
model_ols <- lm(price~1, small_diamond) # membuat model price tanpa menggunakan prediktor
model_ols
summary(model_diamond)
price = -2141 + 7611*2.4
price
library(dplyr)
crime <- read.csv("data_input/crime.csv") %>%
dplyr::select(-X)
names(crime) <- c("percent_m", "is_south", "mean_education", "police_exp60", "police_exp59", "labour_participation",
"m_per1000f", "state_pop", "nonwhites_per1000", "unemploy_m24", "unemploy_m39", "gdp", "inequality",
"prob_prison", "time_prison", "crime_rate")
head(crime)
model_ineq <- lm(formula = inequality~gdp, data = crime)
summary(model_ineq)
# Visualizing fitting line
ggplot(crime, aes(x = gdp, y = inequality))+
geom_point(alpha = 0.5)+
geom_smooth(method = "lm")+
theme_minimal()
carat <- c(0.97, 1.2, 0.69, 0.89)
predict(object = model_diamond, newdata = data.frame(carat))
# Visualizing fitting line
ggplot(small_diamond, aes(x = carat, y = price))+
geom_point(alpha = 0.5)+
geom_smooth(method = "lm")+
theme_minimal()
ggplot(small_diamond, aes(x = carat))+
geom_boxplot()
# mendapatkan nilai data yang termasuk outlier
boxplot(small_diamond$carat, graph = F)$out
small_diamond_no <- small_diamond %>%
filter(carat < 2.1)
head(small_diamond_no)
model_diamond_no <- lm(formula = price ~ carat, data = small_diamond_no)
model_diamond_no
model_diamond
ggplot(small_diamond, aes(x = carat, y = price))+
geom_point(alpha = 0.5)+
geom_abline(intercept = model_diamond$coefficients[1], slope = model_diamond$coefficients[2], col = "blue")+ # menampilkan garis regresi dengan outlier
geom_abline(intercept = model_diamond_no$coefficients[1], slope = model_diamond_no$coefficients[2], col = "red")+ # menampilkan regresi tanpa outlier
theme_minimal()
model_diamond$coefficients
model_diamond_no$coefficients
summary(model_diamond)$r.squared
summary(model_diamond_no)$r.squared
library(MASS)
data(hills)
hills
# cara 1
model_time <- lm(formula = time ~ dist+climb, data = hills)
# cara 2
model_time <- lm(formula = time ~ ., data = hills)
model_time
summary(model_time)
# membuat beberapa model
model_time2 <- lm(time~dist, hills)
# membandingkan nilai r-quared model
summary(model_time2)$r.squared # model dg 1 prediktor
summary(model_time)$r.squared # model dg 2 prediktor
# membandingkan nilai adj r-quared model
summary(model_time2)$adj.r.squared
summary(model_time)$adj.r.squared
insurance <- read.csv("data_input/train_insurance.csv")
str(insurance)
knitr::include_graphics("assets/data-science.png")
# your code here
insurance <- insurance %>%
mutate_if(is.character, as.factor) # mengambil kolom karakter diubah menjadi factor
head(insurance)
anyNA(insurance)
# your code here
plot(insurance$bmi, insurance$charges)
insurance %>%
ggplot(aes(bmi, charges)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
library(GGally)
# Mencari korelasi dari variabel numerik
ggcorr(insurance, label = T)
# your code here
insurance %>%
group_by(smoker) %>%
summarise(mean_charges = mean(charges))
# your code here
insurance %>%
group_by(sex) %>%
summarise(mean_charges = mean(charges))
df_agg <- insurance %>%
group_by(region, sex) %>%
summarise(charges = mean(charges)) %>%
ungroup()
df_agg %>%
ggplot(aes(x = region, y = sex, fill = charges )) +
geom_tile() + # untuk membuat heatmap
scale_fill_gradient(low = "firebrick", high = "lightyellow") +
theme_minimal()
# Membuat model regresi linear
model_charges <- lm(formula = charges ~ age + children + bmi, data = insurance)
summary(model_charges)
model_charges2 <- lm(formula = charges ~ age + bmi, data = insurance)
summary(model_charges2)
# membuat model dengan tambahan variabel sex
model_charges3 <- lm(formula = charges ~ age + children + bmi + sex, data = insurance)
model_charges3
levels(insurance$sex)
# cek summary model
summary(model_charges3)
# model coefficient
model_charges3$coefficients
insurance %>%
mutate(sexmale = ifelse(sex == "male", 1, 0))
model.matrix(charges ~ ., insurance) %>%
as.data.frame()
levels(insurance$region)
# Menggunakan semua variabel untuk menjadi prediktor
lm(charges~., insurance)
head(insurance)
model_charges$call
model_charges2$call
summary(model_charges3)
model_charges_all <- lm(charges~., data = insurance)
summary(model_charges_all)
model_charges_new <- lm(formula = charges ~ age + bmi + children+smoker + region, data = insurance)
model_charges_update <- lm(formula = charges ~ age + bmi + children+smoker, data = insurance)
summary(model_charges_update)
summary(model_charges_all)$adj.r.squared
summary(model_charges_new)$adj.r.squared
summary(model_charges_update)$adj.r.squared
test_insurance <- read.csv("data_input/test_insurance.csv", stringsAsFactors = T)
head(test_insurance)
predict_charges <- predict(object = model_charges_update, newdata = test_insurance)
head(predict_charges)
model_charges_update
range_predict_charges <- predict(object = model_charges_update, newdata = test_insurance,
interval = "prediction", level = 0.95)
head(range_predict_charges)
# contoh convidence interval hasil prediksi
ggplot(small_diamond, aes(x = carat, y = price))+geom_point()+
geom_smooth(method = "lm", level = 0.95)
data.frame("prediction" = predict_charges, "actual" = test_insurance$charges,
"eror" = predict_charges - test_insurance$charges)
#menghitung error manual
predict_charges - test_insurance$charges
mae <- mean(abs(predict_charges - test_insurance$charges))
mae
# install.packages("MLmetrics")
library(MLmetrics)
MAPE(y_pred = predict_charges, y_true = test_insurance$charges)*100
MSE(y_pred = predict_charges, y_true = test_insurance$charges)
RMSE(y_pred = predict_charges, y_true = test_insurance$charges)
knitr::include_graphics("assets/mae-vs-rmse.png")
summary(model_charges_all)
crime
# model tanpa prediktor
# model dengan semua prediktor
model_ineq_all <- lm(formula = inequality~., data = crime)
summary(model_ineq_all)
model_backward <- step(object = model_ineq_all, direction = "backward", trace = 0)
summary(model_backward)
model_ineq_none <- lm(formula = inequality~1, data = crime)
model_forward <- step(object = model_ineq_none, direction = "forward",
scope = list(lower = model_ineq_none, upper = model_ineq_all), trace = 0)
summary(model_forward)
model_both <- step(object = model_ineq_all, direction = "both",
scope = list(lower = model_ineq_none, upper = model_ineq_all), trace = 0)
summary(model_both)
summary(model_backward)$adj.r.squared
summary(model_forward)$adj.r.squared
summary(model_both)$adj.r.squared
summary(model_backward)
crime <- read.csv("data_input/crime.csv")
crime <- crime %>%
dplyr::select(-X) %>%
setNames(c("percent_m", "is_south", "mean_education", "police_exp60",
"police_exp59", "labour_participation", "m_per1000f", "state_pop",
"nonwhites_per1000", "unemploy_m24", "unemploy_m39", "gdp", "inequality",
"prob_prison", "time_prison", "crime_rate"))
str(crime)
# Melakukan pemilihan variabel dengan stepwise backward
model_backward
model_backward
library(GGally)
ggcorr(crime, label = T, label_size = 3, hjust = 0.9)
cor.test(x = crime$state_pop, crime$inequality) # tidak signifikan linear
cor.test(x = crime$crime_rate, crime$inequality) # tidak signifikan linear
hist(model_backward$residuals)
shapiro.test(model_backward$residuals)
crime %>%
mutate(inequality_scale = log(inequality)) %>%
dplyr::select(inequality, inequality_scale)
knitr::include_graphics("assets/heteroscedasticity.png")
plot(x = model_backward$fitted.values, y = model_backward$residuals)
library(lmtest)
bptest(formula = model_backward)
library(car)
vif(model_backward)
vif(model_ineq_all)
# install.packages("performance")
library(performance)
# asumsi multikolinearity
check_collinearity(model_backward)
# asumsi normality
check_normality(model_backward, )
# asumsi homoscedastocity
check_heteroscedasticity(model_backward)
# untuk cek seluruh asumsi linear regression
check_model(model_backward)
install.packages("see")
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>")
options(scipen = 9999)
# library
library(dplyr)
# peluang lulus
24/30
# peluang tidak lulus
(30-24)/30
# tentukan kelas
ifelse(0.8 > 0.5, "LULUS", "TIDAK LULUS")
# peluang = 0.8
# peluang tidak lulus = 0.2
# odds
0.8/0.2
# peluang
p <- (100-25)/100
# odds
p/(1-p) #0.75/0.25
# odds: p/1-p
# min
0/(1-0)
# max
1/(1-1)
# log of odds - lulus kuis
log(4)
# log of odds - pesawat on time
log(3)
# min
log(0/(1-0))
# max
log(1/(1-1))
# log of odds -> odds
odds <- exp(1.386294) # untuk merubah nilai log ke nilai aslinya bisa menggunakan exponen
odds
# odds -> peluang dengan `odds/(odds+1)`
odds/(odds+1)
library(gtools)
# peluang -> log of odds dengan `logit()`
logit(0.8)
# log of odds -> peluang dengan `inv.logit()`
inv.logit(1.386294)
# sigmoid function
curve(inv.logit(x), from = -10, to = 10,
xlab = "Log of Odds",
ylab = "Peluang")
# read & inspect data
honors <- read.csv("data_input/sample.csv") %>%
select(-femalexmath)
